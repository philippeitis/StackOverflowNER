<row Id="13347179" PostTypeId="1" AcceptedAnswerId="13347433" CreationDate="2012-11-12T16:09:49.260" Score="0"
     ViewCount="1505"
     Body="&lt;p&gt;There are many folks out there that claim their singleton implementation to be robust and general because it uses metaprogramming constructs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My goal is to enforce a singleton policy onto a derived class so that I do not have to explicitly (manually) declare the derived class' constructors as private. I think there's a way to naively add the instance static variable and the getter as a policy by making the templated singleton a friend of the class you derive. But that's not at all elegant.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I started with this code, that, among other things, is given as being a correct (i.e. complete) design of a singleton, while it is clearly allowing for multiple instances:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template &amp;lt;class CWrappedClass&amp;gt;&#xA;class CSingleton&#xA;{&#xA;protected:&#xA;    static CWrappedClass* ms_instance;&#xA;private:&#xA;    CSingleton(){}&#xA;    CSingleton(const CSingleton&amp;amp; ) {}&#xA;    CSingleton&amp;amp; operator = (const CSingleton&amp;amp;) {}&#xA;&#xA;public:&#xA;    static CWrappedClass&amp;amp; GetInstance()&#xA;    {&#xA;        if (ms_instance == NULL)&#xA;            ms_instance = new CWrappedClass;&#xA;        return *ms_instance;&#xA;    }&#xA;};&#xA;&#xA;template &amp;lt;class CWrappedClass&amp;gt;&#xA;CWrappedClass* CSingleton&amp;lt;CWrappedClass&amp;gt;::ms_instance = NULL;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And a singleton client of this &quot;policy&quot;, using CRTP:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class CThing : public CSingleton&amp;lt;CThing&amp;gt;&#xA;{&#xA;     // friend class CSingleton&amp;lt;CThing&amp;gt;; // only if ctor is private!&#xA;public:&#xA;    void DoNothing()&#xA;    {&#xA;        std::cout&amp;lt;&amp;lt;&quot; Nothing \n&quot;;&#xA;    }&#xA;    CThing()&#xA;    {&#xA;        std::cout&amp;lt;&amp;lt;&quot; single &quot;;&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; this is not a correct implementation of a CRTP Singleton policy, it's merely part of the question!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code &lt;em&gt;won't&lt;/em&gt; compile as is. The base singleton policy class has its constructor declared private, so it can't support derived instances unless the child is a friend of this class. People usually make the constructors protected, which means there's nothing to keep a user from making derived class non-singletonian.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Problem/Question&lt;/strong&gt;: Is there any mechanism to enforce a singleton policy without having to make the derived class' constructors private manually?&lt;/p&gt;&#xA;"
     OwnerUserId="1256811" LastEditorUserId="1256811" LastEditDate="2012-11-12T16:19:32.020"
     LastActivityDate="2012-11-12T16:25:38.137" Title="Templated Singleton Policy using CRTP in C++"
     Tags="&lt;c++&gt;&lt;templates&gt;&lt;design-patterns&gt;&lt;singleton&gt;" AnswerCount="1" CommentCount="5"
     FavoriteCount="1"/>
<row Id="13352832" PostTypeId="1" AcceptedAnswerId="13353144" CreationDate="2012-11-12T22:45:07.810" Score="0"
     ViewCount="796"
     Body="&lt;p&gt;I've got this as XML:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&amp;lt;product&amp;gt;&#xA;&amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&#xA;&amp;lt;defaultImage&amp;gt;test.jpg&amp;lt;/defaultImage&amp;gt;&#xA;&amp;lt;/product&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I've got this as php:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$testcase = 'defaultimage';&#xA;$xml = simplexml_load_file('./temp/'.$i.'.xml');&#xA;foreach ($xml-&amp;gt;children() as $child) {&#xA;    $child-&amp;gt;$testcase;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now the problem is this, I'm forced to have &lt;code&gt;$testcase&lt;/code&gt; in a lowercase form (defaultimage) BUT in the XML file the name of the child is: &lt;code&gt;defaultImage&lt;/code&gt; (note the uppercase I)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Question: How can I handle all the children as lowercases?&lt;/p&gt;&#xA;"
     OwnerUserId="1501285" LastEditorUserId="363262" LastEditDate="2012-11-12T23:29:08.180"
     LastActivityDate="2012-11-12T23:29:08.180" Title="PHP simplexml children to lowercase"
     Tags="&lt;php&gt;&lt;simplexml&gt;&lt;lowercase&gt;" AnswerCount="1" CommentCount="0"/>
<row Id="1533" PostTypeId="2" ParentId="1528" CreationDate="2008-08-04T19:19:33.013" Score="16"
     Body="&lt;p&gt;While you cannot prevent usage of those inherited members to my knowledge, you should be able to hide them from IntelliSense using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.editorbrowsableattribute.aspx&quot; rel=&quot;noreferrer&quot;&gt;EditorBrowsableAttribute&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Using System.ComponentModel;&#xA;&#xA;[EditorBrowsable(EditorBrowsableState.Never)]&#xA;private string MyHiddenString = &quot;Muahahahahahahahaha&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; Just saw this in the documentation comments, which makes it kinda useless for this purpose:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;There is a prominent note that states that this attribute &quot;does not suppress members from a class in the same assembly&quot;. That is true but not complete. Actually, the attribute does not suppress members from a class in the same solution.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;"
     OwnerUserId="91" LastEditorUserId="91" LastEditDate="2009-11-19T17:51:07.720"
     LastActivityDate="2009-11-19T17:51:07.720" CommentCount="0"/>
  
